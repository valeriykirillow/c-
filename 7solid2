


//using SolidWorks.Interop.sldworks;
//using SolidWorks.Interop.swconst;
//using System;
//using System.Runtime.InteropServices;
//using System.Windows.Forms;

//namespace _7solidlab
//{
//    public partial class Form1 : Form
//    {
//        private TextBox txtWidth, txtDepth, txtHeight;
//        private TextBox txtMinDia, txtMaxDia, txtStep;
//        private Button btnCreateBox, btnCutHoles;

//        public Form1()
//        {
//            SetupUI();
//        }



//        private void SetupUI()
//        {
//            this.Text = "SolidWorks - Параллелепипед и отверстия";
//            this.ClientSize = new System.Drawing.Size(330, 300);

//            int y = 20;

//            // Размеры параллелепипеда
//            this.Controls.AddRange(new Control[]
//            {
//                new Label { Text = "Ширина (X), мм:", Location = new System.Drawing.Point(20, y), Size = new System.Drawing.Size(120, 20) },
//                txtWidth = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "100" },
//                new Label { Text = "Глубина (Z), мм:", Location = new System.Drawing.Point(20, y+=30), Size = new System.Drawing.Size(120, 20) },
//                txtDepth = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "80" },
//                new Label { Text = "Высота (Y), мм:", Location = new System.Drawing.Point(20, y+=30), Size = new System.Drawing.Size(120, 20) },
//                txtHeight = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "20" }
//            });

//            btnCreateBox = new Button
//            {
//                Text = "Создать параллелепипед",
//                Location = new System.Drawing.Point(60, y += 40),
//                Size = new System.Drawing.Size(200, 30)
//            };
//            btnCreateBox.Click += BtnCreateBox_Click;
//            this.Controls.Add(btnCreateBox);

//            // Параметры отверстий
//            this.Controls.AddRange(new Control[]
//            {
//                new Label { Text = "Мин. диаметр (мм):", Location = new System.Drawing.Point(20, y += 40), Size = new System.Drawing.Size(130, 20) },
//                txtMinDia = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "5" },
//                new Label { Text = "Макс. диаметр (мм):", Location = new System.Drawing.Point(20, y += 30), Size = new System.Drawing.Size(130, 20) },
//                txtMaxDia = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "80" },
//                new Label { Text = "Шаг (мм):", Location = new System.Drawing.Point(20, y += 30), Size = new System.Drawing.Size(130, 20) },
//                txtStep = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "10" }
//            });

//            btnCutHoles = new Button
//            {
//                Text = "Создать отверстия",
//                Location = new System.Drawing.Point(60, y += 40),
//                Size = new System.Drawing.Size(200, 30)
//            };
//            btnCutHoles.Click += BtnCutHoles_Click;
//            this.Controls.Add(btnCutHoles);
//        }

//        private void BtnCreateBox_Click(object sender, EventArgs e)
//        {
//            if (!ValidateBoxInputs(out double width, out double depth, out double height))
//                return;

//            ISldWorks swApp = (ISldWorks)Marshal.GetActiveObject("SldWorks.Application");
//            ModelDoc2 swModel = (ModelDoc2)swApp.ActiveDoc;

//            if (!ValidateDocument(swModel)) return;

//            CreateExtrudedBox(swModel, width, depth, height);
//            MessageBox.Show("Параллелепипед создан!", "Успех", MessageBoxButtons.OK, MessageBoxIcon.Information);
//        }




//        private void BtnCutHoles_Click(object sender, EventArgs e)
//        {
//            if (!ValidateHoleInputs(out double minDia, out double maxDia, out double step))
//                return;

//            ISldWorks swApp = (ISldWorks)Marshal.GetActiveObject("SldWorks.Application");
//            ModelDoc2 swModel = (ModelDoc2)swApp.ActiveDoc;

//            if (!ValidateDocument(swModel)) return;

//            SketchManager swSketch = swModel.SketchManager;

//            for (double d = minDia; d <= maxDia + 0.001; d += step)
//            {
//                swModel.ClearSelection2(true);

//                // Всегда выбираем плоскость "Сверху" перед созданием нового эскиза
//                bool selected = swModel.Extension.SelectByID2("Сверху", "PLANE", 0, 0, 0, false, 0, null, 0);
//                if (!selected)
//                {
//                    MessageBox.Show("Не удалось выбрать плоскость 'Сверху'", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
//                    return;
//                }

//                swSketch.InsertSketch(true);

//                double radius = d / 2000.0;
//                swSketch.CreateCircleByRadius(0, 0, 0, radius);

//                Feature holeFeature = swModel.FeatureManager.FeatureCut3(
//                    false, false, false,
//                (int)swEndConditions_e.swEndCondThroughAll,
//                (int)swEndConditions_e.swEndCondThroughAll,
//                0, 0, false, false, false, false,
//                0, 0, false, false, false, false, false,
//                false, false, false, false, false,
//                (int)swStartConditions_e.swStartSketchPlane,
//                0, false);

//                if (holeFeature == null)
//                {
//                    MessageBox.Show($"Ошибка при создании отверстия Ø{d} мм", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
//                    return;
//                }

//                swSketch.InsertSketch(true); // Завершить эскиз после каждого отверстия
//            }

//            swModel.ShowNamedView2("*Изометрический", (int)swStandardViews_e.swIsometricView);
//            swModel.ViewZoomtofit();

//            MessageBox.Show("Отверстия успешно созданы!", "Готово", MessageBoxButtons.OK, MessageBoxIcon.Information);
//        }


//        private bool ValidateBoxInputs(out double width, out double depth, out double height)
//        {
//            // Присваиваем начальные значения ДО любых условий — так требует компилятор
//            width = 0;
//            depth = 0;
//            height = 0;

//            if (!double.TryParse(txtWidth.Text, out width) ||
//                !double.TryParse(txtDepth.Text, out depth) ||
//                !double.TryParse(txtHeight.Text, out height))
//            {
//                MessageBox.Show("Введите корректные числовые значения размеров!", "Ошибка",
//                    MessageBoxButtons.OK, MessageBoxIcon.Error);
//                return false;
//            }

//            if (width <= 0 || depth <= 0 || height <= 0)
//            {
//                MessageBox.Show("Все размеры должны быть положительными!", "Ошибка",
//                    MessageBoxButtons.OK, MessageBoxIcon.Error);
//                return false;
//            }

//            return true;
//        }
//        private bool ValidateHoleInputs(out double min, out double max, out double step)
//        {
//            // Присваиваем значения по умолчанию СРАЗУ
//            min = 0;
//            max = 0;
//            step = 0;

//            if (!double.TryParse(txtMinDia.Text, out min) ||
//                !double.TryParse(txtMaxDia.Text, out max) ||
//                !double.TryParse(txtStep.Text, out step))
//            {
//                MessageBox.Show("Введите корректные числовые значения для отверстий!", "Ошибка",
//                    MessageBoxButtons.OK, MessageBoxIcon.Error);
//                return false;
//            }

//            if (min <= 0 || max <= min || step <= 0)
//            {
//                MessageBox.Show("Убедитесь, что:\n- Минимум > 0\n- Максимум > Минимум\n- Шаг > 0", "Ошибка",
//                    MessageBoxButtons.OK, MessageBoxIcon.Error);
//                return false;
//            }

//            return true;
//        }

//        private bool ValidateDocument(ModelDoc2 swModel)
//        {
//            if (swModel == null)
//            {
//                MessageBox.Show("Откройте деталь в SolidWorks!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            if (swModel.GetType() != (int)swDocumentTypes_e.swDocPART)
//            {
//                MessageBox.Show("Текущий документ не является деталью!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Warning);
//                return false;
//            }

//            return true;
//        }

//        private void CreateExtrudedBox(ModelDoc2 swModel, double width, double depth, double height)
//        {
//            SketchManager swSketch = swModel.SketchManager;
//            swModel.ClearSelection2(true);
//            swModel.Extension.SelectByID2("Сверху", "PLANE", 0, 0, 0, false, 0, null, 0);
//            swSketch.InsertSketch(true);

//            double halfWidth = width / 2000.0;
//            double halfDepth = depth / 2000.0;
//            swSketch.CreateCenterRectangle(0, 0, 0, halfWidth, halfDepth, 0);

//            swModel.FeatureManager.FeatureExtrusion3(
//                true, false, false,
//                (int)swEndConditions_e.swEndCondBlind,
//                (int)swEndConditions_e.swEndCondBlind,
//                height / 1000.0,
//                0, false, false, false, false,
//                0, 0, false, false, false, false,
//                true, true, true,
//                (int)swStartConditions_e.swStartSketchPlane,
//                0, false);

//            swSketch.InsertSketch(true);
//            swModel.ShowNamedView2("*Изометрический", (int)swStandardViews_e.swIsometricView);
//            swModel.ViewZoomtofit();
//        }
//    }
//}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
using SolidWorks.Interop.sldworks;
using SolidWorks.Interop.swconst;
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace _7solidlab
{
    public partial class Form1 : Form
    {
        private TextBox txtWidth, txtDepth, txtHeight;
        private TextBox txtMinDia, txtMaxDia, txtStep;
        private Button btnCutBox, btnCutHoles;

        private ISldWorks swApp;

        private PictureBox pictureBoxPreview;

        public Form1()
        {
            SetupUI();
            ConnectToSolidWorks();
            InitializePictureBox();
        }

        private void ConnectToSolidWorks()
        {
            try
            {
                swApp = (ISldWorks)Marshal.GetActiveObject("SldWorks.Application");
            }
            catch
            {
                MessageBox.Show("Не удалось подключиться к SolidWorks. Убедитесь, что SolidWorks запущен!", "Ошибка",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private void InitializePictureBox()
        {
            // Создаем PictureBox
            pictureBoxPreview = new PictureBox();
            pictureBoxPreview.Name = "pictureBoxPreview";

            // Устанавливаем позицию и размеры — 2/3 ширины формы
            int padding = 20;
            int formWidth = this.ClientSize.Width;
            int formHeight = this.ClientSize.Height;

            int pictureBoxWidth = (int)(formWidth * 0.66); // 2/3 ширины
            int pictureBoxHeight = formHeight - 2 * padding;

            pictureBoxPreview.Location = new Point(formWidth - pictureBoxWidth - padding, padding);
            pictureBoxPreview.Size = new Size(pictureBoxWidth, pictureBoxHeight);

            // Настройка отображения изображения
            pictureBoxPreview.BorderStyle = BorderStyle.FixedSingle;
            pictureBoxPreview.SizeMode = PictureBoxSizeMode.Zoom;

            pictureBoxPreview.Image = Image.FromFile(@"D:\Comp\Downloads\task7.jpg");

            // Добавляем PictureBox на форму
            this.Controls.Add(pictureBoxPreview);

            // Обработка изменения размера формы
            //this.Resize += Form1_Resize;
        }

        private void SetupUI()
        {
            this.Text = "SolidWorks - Кириллов В.А. 10702222";
            this.ClientSize = new System.Drawing.Size(1000, 460);

            int y = 20;
            this.Controls.AddRange(new Control[]
            {
                new Label { Text = "Ширина (X), мм:", Location = new System.Drawing.Point(20, y), Size = new System.Drawing.Size(120, 20) },
                txtWidth = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "105" },

                new Label { Text = "Глубина (Z), мм:", Location = new System.Drawing.Point(20, y+=30), Size = new System.Drawing.Size(120, 20) },
                txtDepth = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "80" },

                new Label { Text = "Высота (Y), мм:", Location = new System.Drawing.Point(20, y+=30), Size = new System.Drawing.Size(120, 20) },
                txtHeight = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "20" }
            });

            btnCutBox = new Button
            {
                Text = "Вырезать параллелепипед",
                Location = new System.Drawing.Point(60, y += 40),
                Size = new System.Drawing.Size(200, 30)
            };
            btnCutBox.Click += BtnCutBox_Click;
            this.Controls.Add(btnCutBox);

            this.Controls.AddRange(new Control[]
            {
                new Label { Text = "Мин. диаметр (мм):", Location = new System.Drawing.Point(20, y += 40), Size = new System.Drawing.Size(130, 20) },
                txtMinDia = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "10" },

                new Label { Text = "Макс. диаметр (мм):", Location = new System.Drawing.Point(20, y += 30), Size = new System.Drawing.Size(130, 20) },
                txtMaxDia = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "80" },

                new Label { Text = "Шаг (мм):", Location = new System.Drawing.Point(20, y += 30), Size = new System.Drawing.Size(130, 20) },
                txtStep = new TextBox { Location = new System.Drawing.Point(160, y), Size = new System.Drawing.Size(120, 20), Text = "10" }
            });

            btnCutHoles = new Button
            {
                Text = "Цилиндры от меньшего к большему",
                Location = new System.Drawing.Point(60, y += 40),
                Size = new System.Drawing.Size(200, 30)
            };
            btnCutHoles.Click += BtnCutHoles_Click;
            this.Controls.Add(btnCutHoles);

            Button btnCutHolesReverse = new Button
            {
                Text = "Цилиндры от большего к меньшему",
                Location = new System.Drawing.Point(60, y += 40),
                Size = new System.Drawing.Size(200, 30)
            };
            btnCutHolesReverse.Click += BtnCutHolesReverse_Click;
            this.Controls.Add(btnCutHolesReverse);
        }

        private bool ValidateBoxInputs(out double width, out double depth, out double height)
        {
            width = depth = height = 0;
            return double.TryParse(txtWidth.Text, out width) && double.TryParse(txtDepth.Text, out depth)
                && double.TryParse(txtHeight.Text, out height) && width > 0 && depth > 0 && height > 0;
        }

        private bool ValidateHoleInputs(out double min, out double max, out double step)
        {
            min = max = step = 0;
            return double.TryParse(txtMinDia.Text, out min)
                && double.TryParse(txtMaxDia.Text, out max) && double.TryParse(txtStep.Text, out step)
                && min > 0 && max > min && step > 0;
        }

        private bool ValidateDocument(ModelDoc2 swModel)
        {
            if (swModel == null || swModel.GetType() != (int)swDocumentTypes_e.swDocPART)
            {
                MessageBox.Show("Откройте деталь SolidWorks.", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
            return true;
        }

        private bool HasSolidBody(ModelDoc2 swModel)
        {
            PartDoc part = (PartDoc)swModel;
            object[] bodies = (object[])part.GetBodies2((int)swBodyType_e.swSolidBody, true);
            return bodies != null && bodies.Length > 0;
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // Form1
            // 
            this.ClientSize = new System.Drawing.Size(271, 261);
            this.Name = "Form1";
            this.Load += new System.EventHandler(this.Form1_Load);
            this.ResumeLayout(false);

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void BtnCutBox_Click(object sender, EventArgs e)
        {
            if (!ValidateBoxInputs(out double width, out double depth, out double height)) return;
            if (swApp == null) { ConnectToSolidWorks(); if (swApp == null) return; }

            ModelDoc2 swModel = (ModelDoc2)swApp.ActiveDoc;
            if (!ValidateDocument(swModel)) return;
            if (!HasSolidBody(swModel))
            {
                MessageBox.Show("Нет тела для вырезания!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            CutExtrudedBox(swModel, width, depth, height);
            MessageBox.Show("Параллелепипед вырезан!", "Успех", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void CutExtrudedBox(ModelDoc2 swModel, double width, double depth, double height)
        {
            swModel.ClearSelection2(true);

            // Выбор плоскости "Сверху"
            bool planeSelected = swModel.Extension.SelectByID2("Сверху", "PLANE", 0, 0, 0, false, 0, null, 0);
            if (!planeSelected)
            {
                MessageBox.Show("Не удалось выбрать плоскость 'Сверху'", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Начало эскиза
            swModel.SketchManager.InsertSketch(true);

            // Половина ширины и глубины (в метрах)
            double halfWidth = width / 2000.0;
            double halfDepth = depth / 2000.0;

            // Прямоугольник от центра
            if (swModel.SketchManager.CreateCenterRectangle(0, 0, 0, halfWidth, halfDepth, 0) == null)
            {
                MessageBox.Show("Не удалось создать прямоугольник!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                swModel.SketchManager.InsertSketch(true);
                return;
            }

            // Завершение эскиза
            swModel.SketchManager.InsertSketch(true);

            // Вырезание — в две стороны: вверх и вниз по половине height
            Feature cutFeature = swModel.FeatureManager.FeatureCut3(
                false,   // Flip side to cut
                false,  // Thin feature
                false,   // Two directions
                (int)swEndConditions_e.swEndCondBlind, // Direction 1 type
                (int)swEndConditions_e.swEndCondBlind, // Direction 2 type
                height / 2000.0, // Direction 1 depth (вверх)
                height / 2000.0, // Direction 2 depth (вниз)
                false, false, false, false,
                0, 0, false, false, false, false,
                false, false, false, false, false, false,
                (int)swStartConditions_e.swStartSketchPlane,
                0, false);

            if (cutFeature == null)
            {
                MessageBox.Show("Не удалось выполнить вырезание!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            swModel.ShowNamedView2("*Изометрический", (int)swStandardViews_e.swIsometricView);
            swModel.ViewZoomtofit2();
        }



        private void BtnCutHoles_Click(object sender, EventArgs e)
        {
            if (!ValidateHoleInputs(out double minDia, out double maxDia, out double step)) return;
            if (!ValidateBoxInputs(out double width, out double depth, out double height)) return;
            if (swApp == null) { ConnectToSolidWorks(); if (swApp == null) return; }

            double maxAllowedDia = Math.Min(width, depth);
            if (maxDia > maxAllowedDia)
            {
                MessageBox.Show($"Максимальный диаметр цилиндров ограничен размером основания: {maxAllowedDia} мм",
                    "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Information);
                maxDia = maxAllowedDia;
            }

            ModelDoc2 swModel = (ModelDoc2)swApp.ActiveDoc;
            if (!ValidateDocument(swModel)) return;

            SketchManager swSketch = swModel.SketchManager;

            double currentInnerDia = minDia;
            double nextOuterDia = currentInnerDia + step;

            // Создаем самый маленький цилиндр
            Feature innerFeature = CreateCylinder(swModel, swSketch, currentInnerDia, height);
            if (innerFeature == null)
            {
                MessageBox.Show($"Ошибка при создании цилиндра Ø{currentInnerDia}", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            while (nextOuterDia <= maxDia)
            {
                // Создаем следующий (больший) цилиндр
                Feature outerFeature = CreateCylinder(swModel, swSketch, nextOuterDia, height);
                if (outerFeature == null)
                {
                    MessageBox.Show($"Ошибка при создании внешнего цилиндра Ø{nextOuterDia}", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                // Удаляем предыдущий (меньший) цилиндр
                bool deleted = innerFeature.Select2(false, -1);
                if (!deleted)
                {
                    MessageBox.Show($"Не удалось выбрать внутренний цилиндр для удаления Ø{currentInnerDia}", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                bool result = swModel.Extension.DeleteSelection2((int)swDeleteSelectionOptions_e.swDelete_Absorbed);
                if (!result)
                {
                    MessageBox.Show("Не удалось удалить внутренний цилиндр", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                // Переходим к следующему цилиндру
                innerFeature = outerFeature;
                currentInnerDia = nextOuterDia;
                nextOuterDia += step;
            }

            swModel.ClearSelection2(true);
            swModel.EditRebuild3();
            MessageBox.Show("Цилиндры от меньшего к большему созданы", "Успех", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }



        private void BtnCutHolesReverse_Click(object sender, EventArgs e)
        {
            if (!ValidateHoleInputs(out double minDia, out double maxDia, out double step)) return;
            if (!ValidateBoxInputs(out double width, out double depth, out double height)) return;
            if (swApp == null) { ConnectToSolidWorks(); if (swApp == null) return; }

            //Ограничиваем maxDia по меньшей стороне основания
            double maxAllowedDia = Math.Min(width, depth);
            if (maxDia > maxAllowedDia)
            {
                MessageBox.Show($"Максимальный диаметр цилиндров ограничен размером основания: {maxAllowedDia} мм",
                    "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Information);
                maxDia = maxAllowedDia;
            }

            ModelDoc2 swModel = (ModelDoc2)swApp.ActiveDoc;
            if (!ValidateDocument(swModel)) return;

            SketchManager swSketch = swModel.SketchManager;

            double currentOuterDia = maxDia;
            double nextInnerDia = currentOuterDia - step;

            Feature outerFeature = CreateCylinder(swModel, swSketch, currentOuterDia, height);
            if (outerFeature == null)
            {
                MessageBox.Show($"Ошибка при создании цилиндра Ø{currentOuterDia}", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            while (nextInnerDia >= minDia)
            {
                Feature innerFeature = CreateCylinder(swModel, swSketch, nextInnerDia, height);
                if (innerFeature == null)
                {
                    MessageBox.Show($"Ошибка при создании внутреннего цилиндра Ø{nextInnerDia}", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                bool deleted = outerFeature.Select2(false, -1);
                if (!deleted)
                {
                    MessageBox.Show($"Не удалось выбрать внешний цилиндр для удаления Ø{currentOuterDia}", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                bool result = swModel.Extension.DeleteSelection2((int)swDeleteSelectionOptions_e.swDelete_Absorbed);
                if (!result)
                {
                    MessageBox.Show("Не удалось удалить внешний цилиндр", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                outerFeature = innerFeature;
                currentOuterDia = nextInnerDia;
                nextInnerDia -= step;
            }

            swModel.ClearSelection2(true);
            swModel.EditRebuild3();
            MessageBox.Show("Цилиндры от большего к меньшему созданы", "Успех", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }




        private Feature CreateCylinder(ModelDoc2 swModel, SketchManager swSketch, double diameter, double height, bool nameFeature = false)
        {
            swModel.ClearSelection2(true);
            bool selected = swModel.Extension.SelectByID2("Сверху", "PLANE", 0, 0, 0, false, 0, null, 0);
            if (!selected) return null;

            swSketch.InsertSketch(true);
            double radius = diameter / 2000.0; // мм → метры → радиус
            swSketch.CreateCircleByRadius(0, 0, 0, radius);
            swSketch.InsertSketch(true);

            Feature feat = swModel.FeatureManager.FeatureExtrusion2(false,     // flip
    false,    // thin feature
    false,     // two directions
    (int)swEndConditions_e.swEndCondBlind,
    (int)swEndConditions_e.swEndCondBlind,
    height / 2000.0, // вверх
    height / 2000.0, // вниз
    false, false, false, false,
    0, 0, false, false, false, false,
    false, false, false,
    (int)swStartConditions_e.swStartSketchPlane,
    0, false);

            if (feat != null && nameFeature)
            {
                feat.Name = $"Cylinder_{diameter}";
            }

            return feat;
        }

    }
}



